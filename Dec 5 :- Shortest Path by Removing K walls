Given a 2-D binary matrix of size n*m, where 0 represents an empty space while 1 represents a wall you cannot walk through. You are also given an integer k.
You can walk up, down, left, or right. Given that you can remove up to k walls, return the minimum number of steps to walk from the top left corner (0, 0) to the bottom right corner (n-1, m-1).
Note: If there is no way to walk from the top left corner to the bottom right corner, return -1.


Example 1:

Input: n = 3, m = 3, k = 1
mat = {{0, 0, 0},
       {0, 0, 1},
       {0, 1, 0}}
Output:
4
Explanation:
We can remove any one of the walls and
reach the bottom in 4 moves.  
Example 2:

Input:
n = 2, m = 2, k = 0
mat[] = {{0, 1},
         {1, 0}}
Output:
-1

Constraints:
1 ≤ n,m ≤ 50
0 ≤ k ≤ n*m
Top left and bottom right corners doesn't have 1


Expected Time Complexity: O(n*m*k).
Expected Auxiliary Space: O(n*m*k).


//code : -
class Solution {
    static int shotestPath(int[][] mat, int n, int m, int k) {
       //bfs traversal use queue
         int direction[][]={{1,0},{-1,0},{0,1},{0,-1}};
         Queue<int[]> q=new LinkedList<>();//we store row,col and k value in array
         q.add(new int[]{0,0,k});
         boolean vis[][][]=new boolean[n][m][k+1];//we take k+1 as if k==0 then it do not iterate
         vis[0][0][k]=true;
         int dis=0;
         while(!q.isEmpty()){
             int size=q.size();
             while(size-->0){
                 int cur[]=q.remove();
                 if(cur[0]==n-1 && cur[1]==m-1)return dis;
                 for(int d[]:direction){
                     int i=cur[0]+d[0];
                     int j=cur[1]+d[1];
                     int obstacle=cur[2];
                     if(i<n && j<m && i>=0 && j>=0){
                         if(mat[i][j]==0 && !vis[i][j][obstacle]){
                             q.add(new int[]{i,j,obstacle});
                             vis[i][j][obstacle]=true;
                         }else if(mat[i][j]==1 && obstacle>0 && !vis[i][j][obstacle-1]){
                             q.add(new int[]{i,j,obstacle-1});
                             vis[i][j][obstacle-1]=true;
                         }
                     }
                 }
             }
             dis++;
         }
         return -1;
    }
};
