Given a row wise sorted matrix of size R*C where R and C are always odd, find the median of the matrix.

(Brute force approach)


class Solution {
    int median(int matrix[][], int r, int c) {
        //brute force taking time complexity O(r*c)+O(log(r*c)) and space O(r*c)
       int ans=-1;
        int array[]=new int[r*c];
        int index=-1;
        for(int row=0;row<r;row++){
            for(int col =0;col<c;col++){
                array[++index]=matrix[row][col];
            }
        }
        Arrays.sort(array);
        ans=array[array.length/2];
        return ans;
    }
}

//(optimised approach)

//User function Template for Java

class Solution {
    int median(int matrix[][], int R, int C) {
        // code here 
        int min=Integer.MAX_VALUE;
        int max=Integer.MIN_VALUE;
        for(int i=0;i<R;i++){
            //as we know the row are sorted so we can use it to find min and max value
            if(matrix[i][0]<min)
            min=matrix[i][0];
            
            if(matrix[i][C-1]>max)
            max=matrix[i][C-1];
        }
        int desired=((R*C)+1)/2;
        
        while(min<max){
            int mid=(min+max)/2;
            //now we check number of elements present before mid and if equal to desired 
           // and the element is present than it is the ans
           int smallerCount=0;
           //here we also use sorted row to count smaller elements
           for(int i=0;i<R;i++){
               int l=0;
               int r=C-1;
               while(l<r){
                   int m=(l+r)/2;
                   if(matrix[i][m]<=mid)
                   l=m+1;
                   else
                   r=m;
               }
               smallerCount+=l;
               if(matrix[i][l]<=mid)
                  smallerCount++;
           }
           
           if(smallerCount<desired)
              min=mid+1;
            else 
              max=mid;
              
        }
        //time complexity : R* logC as we use binary search in column and R row is present
        //and another outer loop
        return min;
    }
}
