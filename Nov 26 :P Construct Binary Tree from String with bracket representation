Construct a binary tree from a string consisting of parenthesis and integers. The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the roots value and a pair of parenthesis contains a child binary tree with the same structure. Always start to construct the left child node of the parent first if it exists.

class Solution {
    public static Node treeFromString(String s) {
        int ind[]=new int[]{0};
        return dfs(ind,s);
    }
    public static Node dfs(int idx[],String s){
        //base case
        if(idx[0]>=s.length() || s.charAt(idx[0])==')'){
            idx[0]++;
            return null;
        }
        int num=0;
        while(idx[0]<s.length() && Character.isDigit(s.charAt(idx[0]))){
            num=num*10+(s.charAt(idx[0])-'0');
            idx[0]++;
        }
        Node head=new Node(num);//root node
        //first left sub tree
        if(idx[0]<s.length() && s.charAt(idx[0])=='('){
            idx[0]++;
            head.left=dfs(idx,s);
        }
        //right subtree
        if(idx[0]<s.length() && s.charAt(idx[0])=='('){
            idx[0]++;
            head.right=dfs(idx,s);
        }
        idx[0]++;
        return head;
    }
    
}
    
