0/1 KNAPSACK PROBLEM

//APPROACH-1 (brute force method taking time complexity-O(2^n))

/* A Naive recursive implementation
of 0-1 Knapsack problem */
//class Knapsack {
 
//    // A utility function that returns maximum of two integers
//    static int max(int a, int b)
//    {
//      return (a > b) ? a : b;
//    }
// 
//    // Returns the maximum value that can be put in a knapsack of capacity W
//    static int knapSack(int W, int wt[], int val[], int n)
//    {
//        // Base Case
//        if (n == 0 || W == 0)
//            return 0;
// 
//        // If weight of the nth item is more than Knapsack capacity W, then this item cannot be included in the optimal solution
//        if (wt[n - 1] > W)
//            return knapSack(W, wt, val, n - 1);
// 
//        // Return the maximum of two cases:
//        // (1) nth item included
//        // (2) not included
//        else
//            return max(val[n - 1]+ knapSack(W - wt[n - 1], wt, val, n - 1),knapSack(W, wt, val, n - 1));
//    }
// 
//    // Driver code
//    public static void main(String args[])
//    {
//        int val[] = new int[] { 60, 100, 120 };
//        int wt[] = new int[] { 10, 20, 30 };
//        int W = 50;
//        int n = val.length;
//        System.out.println(knapSack(W, wt, val, n));
//    }
//}

//aproach-2 (using dp) taking O(n*w)

public class video87knapsack {

	public static void main(String[] args) {
		int price[] = new int[] { 20,30,10,50 };
        int wt[] = new int[] { 1,3,4,6};
        int W = 10;
        int n = price.length;
        System.out.println(knapSack(W, wt, price, n));

	}
	private static int knapSack(int W, int wt[],int price[], int n){
         int i, w;
         int matrix[][] = new int[n + 1][W + 1];//here we store the value and retuirn
         //during recursive call 
         //time complexity=O(n*W)

         for (i = 0; i <= n; i++){
            for (w = 0; w <= W; w++){
               if (i == 0 || w == 0)
                  matrix[i][w] = 0;
              else if (wt[i - 1] <= w)
 matrix[i][w]= Math.max(price[i - 1]+ matrix[i - 1][w - wt[i - 1]],matrix[i - 1][w]);
              else
                 matrix[i][w] = matrix[i - 1][w];
           }
       }

     return matrix[n][W];
  }
}
