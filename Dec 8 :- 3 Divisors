You are given a list of q queries and for every query, you are given an integer N.  The task is to find how many numbers(less than or equal to N) have number of divisors exactly equal to 3.

Example 1:

Input:
q = 1
query[0] = 6
Output:
1
Explanation:
There is only one number 4 which has
exactly three divisors 1, 2 and 4 and
less than equal to 6.
Example 2:

Input:
q = 2
query[0] = 6
query[1] = 10
Output:
1
2

//code

class Solution{
    static ArrayList<Integer> threeDivisors(ArrayList<Long> query, int qn){
        int n=0;
        for(Long q:query){
            n=Math.max(n,(int)Math.sqrt(q));
        }
        
        //by using Sieve of Eratosthenes method to find number of prime in a range
        
        boolean prime[]=new boolean[n+1];
        Arrays.fill(prime,true);
        
        for(int i=2;i<=n;i++){
            if(prime[i]){
                for(int j=i+i;j<=n;j+=i)
                prime[j]=false;
            }
        }
        //store at a time so that we do not have to calculate repetedly 
        int dp[]=new int[n+1];
        for(int i=2;i<=n;i++){
            dp[i]=dp[i-1];
            if(prime[i])
            dp[i]++;
        }
        ArrayList<Integer> ans=new ArrayList<>();
        for(Long q:query){
            int root=(int)Math.sqrt(q);
            ans.add(dp[root]);
        }
        return ans;
    }
}
