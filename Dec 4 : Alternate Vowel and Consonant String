Given a string S of lowercase english characters. Rearrange characters of the given string such that the vowels and consonants occupy alternate positions and 
the string so formed should be lexicographically (alphabetically) smallest. 
Note: Vowels are 'a', 'e', 'i', 'o' and 'u'. 

Example 1:

Input:
S = "aeroplane"
Output: alanepero
Explanation: alanepero  
The vowels and cosonants are arranged 
alternatively with vowels shown in bold.
Also, there's no lexicographically smaller
string possible with required conditions.
Example 2:

Input: 
S = "mississippi"
Output: -1
Explanation: The number of vowels is 4 
whereas the number of consonants is 7.
Hence, there's no way to arrange the
vowels and consonants alternatively.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(2*26).


Constraints:
1 <= N <= 10^6
'a' <= S[ i ] <= 'z'


//code

class Solution{
    public String rearrange(String s, int n){
        int vow_freq[]=new int[26];
        int con_freq[]=new int[26];
        int vow_count=0;
        int con_count=0;
        char smallestVow='u';
        char smallestCon='z';
        for(int i=0;i<n;i++){
            char ch=s.charAt(i);
            if(ch=='a'||ch=='e'||ch=='i'||ch=='o'||ch=='u'){
                vow_freq[ch-'a']++;
                vow_count++;
                smallestVow=(char)Math.min((int)smallestVow,(int)ch);
            }else {
                con_freq[ch - 'a']++;
                smallestCon=(char)Math.min((int)smallestCon,(int)ch);
            }
        }
        con_count=n-vow_count;
        if(Math.abs(vow_count-con_count)>1)
            return "-1";


        boolean isVow=false;
        if(vow_count>con_count){
            isVow=true;

        }else if(vow_count<con_count)
            isVow=false;
        else{//equal number
            if(smallestVow<smallestCon)
                isVow=true;
            else
                isVow=false;

        }
        StringBuilder ans=new StringBuilder();
        int i=0;int j=0;
        while(i<26 && j<26){
            if(isVow){
                while(i<26 && vow_freq[i]==0)i++;
                if(i==26)break;
                ans.append((char)('a'+i));
                vow_freq[i]--;
                isVow=false;

            }else{
                while(j<26 && con_freq[j]==0)j++;
                if(j==26)break;
                ans.append((char)('a'+j));
                con_freq[j]--;
                isVow=true;

            }
        }

return ans.toString();
    }
}
