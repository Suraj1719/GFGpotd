Given an array of integers and a number k, write a function that returns true if given array can be divided into pairs such that sum of every pair is divisible by k.
 

Example 1 :

Input : arr = [9, 5, 7, 3], k = 6
Output: True
Explanation: {(9, 3), (5, 7)} is a 
possible solution. 9 + 3 = 12 is divisible
by 6 and 7 + 5 = 12 is also divisible by 6.

Example 2:

Input : arr = [2, 4, 1, 3], k = 4
Output: False
Explanation: There is no possible solution.

Expected Time Complexity: O(n)
Expected Space Complexity : O(n)
 

Constraints:
1 <= length of array <= 10^5
1 <= elements of array <= 10^5
1 <= k <= 10^5


approach-1(brute force)

class Solution {
    public boolean canPair(int[] nums, int k) {
        
        //time : O(n^2)
        //space : O(1)
        int n=nums.length;
        
        boolean vis[]=new boolean[n];
        int count=0;
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                if(!vis[i] && !vis[j] && (nums[i]+nums[j])%k==0)
                count++;
            }
        }
        return count==n/2?true:false;
    }
}

approach-2(optimized)


//time _ O(n)
//space - O(n)

class Solution {
    public boolean canPair(int[] nums, int k) {
        if(nums.length%2==1) return false;
        
        int[] fre = new int[100001];
        for(int num : nums) {
            int num1 = num%k;
            if(fre[(k-num1)%k]!=0) {
                fre[(k-num1)%k]--;
            } else {
                fre[num1]++;
            }
        }
        for(int f : fre) {
            if(f>0) return false;
        }
        return true;
    }
}

//approach-3(using hashmap)

//time _ O(n)
//space - O(n)

class Solution {
    public boolean canPair(int[] nums, int k) {
        int n=nums.length;
        
        Map<Integer,Integer> freq=new HashMap<>();
        for(int i=0;i<n;i++){
            int rem=nums[i]%k;
            freq.put(rem,freq.getOrDefault(rem,0)+1);
        }
        
        for(int i=0;i<n;i++){
            int rem=nums[i]%k;
            //case-1
            if(rem==0){
                if(freq.get(rem)%2!=0)//odd times
                return false;
            }else{
                if(freq.get(rem)!=freq.get(k-rem))
                return false;
            }
        }
        return true;
    }
}


