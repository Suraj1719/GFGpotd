company : -adobe

In Geekland there is a grid of coins of size N x N. You have to find the maximum sum of coins in any sub-grid of size K x K.
Note: Coins of the negative denomination are also possible at Geekland.

Example 1:

Input: N = 5, K = 3 
mat[[]] = {1, 1, 1, 1, 1} 
          {2, 2, 2, 2, 2} 
          {3, 8, 6, 7, 3} 
          {4, 4, 4, 4, 4} 
          {5, 5, 5, 5, 5}
Output: 48
Explanation: {8, 6, 7}
             {4, 4, 4}
             {5, 5, 5}
has the maximum sum

Example 2:

Input: N = 1, K = 1
mat[[]] = {{4}} 
Output: 4

Expected Time Complexity: O(N2)
Expected Auxiliary Space: O(N2)

Constraints:
1 ≤ K ≤ N ≤ 103
-5*105 ≤ mat[i][j] ≤ 5*105


//code

class Solution
{
    public int Maximum_Sum(int mat[][],int N,int K){
         int ans=Integer.MIN_VALUE;
       int[][] prefix_sum = new int[N][N];
       prefix_sum[0][0]=mat[0][0];
       for(int i=1;i<N;i++){
           prefix_sum[0][i]=prefix_sum[0][i-1]+mat[0][i];
       }
       for(int i=1;i<N;i++){
           prefix_sum[i][0]=prefix_sum[i-1][0]+mat[i][0];
       }
       for(int i=1;i<N;i++){
           for(int j=1;j<N;j++){
               prefix_sum[i][j]=prefix_sum[i-1][j]+prefix_sum[i][j-1]
               -prefix_sum[i-1][j-1]+mat[i][j];
           }
       }
       for(int i=K-1;i<N;i++){
           for(int j=K-1;j<N;j++){
           int sum=prefix_sum[i][j];
             if(i-K>=0){
                 sum=sum-prefix_sum[i-K][j];
             }
             if(j-K>=0){
               sum=sum-prefix_sum[i][j-K];
           }
           if(i-K>=0&&j-K>=0){
               sum=sum+prefix_sum[i-K][j-K];
           }
           ans=Math.max(ans,sum);
           }
           }
       return ans;
    }
}
