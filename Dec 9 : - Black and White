Given the chessboard dimensions. Find out the number of ways we can place a black and a white Knight on this chessboard such that they cannot attack each other.

Note:
The knights have to be placed on different squares. A knight can move two squares horizontally and one square vertically (L shaped), 
or two squares vertically and one square horizontally (L shaped).
The knights attack each other if one can reach the other in one move.

//code : -
class BlackAndWhite
{
    //Function to find out the number of ways we can place a black and a 
    //white Knight on this chessboard such that they cannot attack each other.
    static long numOfWays(int N, int M)
    {
       long ans=0;
       int mod=1000000007;
       //total 8 position
       int dirs[][]=new int[][]{{1,2},{-1,2},{1,-2},{-1,-2},{2,1},{2,-1},{-2,1},{-2,-1}};
       for(int i=0;i<N;i++){
           for(int j=0;j<M;j++){
               long curPos=N*M;
               long minus=1;
               for(int dir[]:dirs){
                   if(isValidPos(i+dir[0],j+dir[1],N,M))
                       minus++;
                   
               }
               curPos=curPos-minus;
               ans=(ans+curPos)%mod;
           }
       }
       return ans%mod;
    }
   static boolean isValidPos(int x,int y,int row,int col){
        return (x>=0 && y>=0 && x<row && y<col);
       
    }
}
