Given a number k and string num of digits (0 to 9) denoting a positive integer. Find a string denoting the lowest integer number possible by removing k digits from num, without changing their order.
Note: num will not contain any leading zero.

 

Example 1:

Input:
k = 2
num = "143729"
Output: "1329"
Explanation: 1329 is the minimum number
possible after removing '4' and '7'.
 

Example 2:

Input:
k = 3
num = "10056"
Output: "0"
Explanation: 0 is the minimum number
possible after removing '1' , '5' and '6'.

//code

class Solution {
    private static int getInt(char ch) {
        return ch - '0';
    }
    static String buildLowestNumber(String str, int k) {
        Stack<Character> stack = new Stack<>();
        
        for (int i=0; i < str.length(); i++) {
    while (!stack.isEmpty() && k > 0 && getInt(stack.peek()) > getInt(str.charAt(i))) {
                stack.pop();
                k--;
            }
            // System.out.println("k: " + k);
            stack.push(str.charAt(i));
        }
        
        
        while (k-- > 0) { 
            stack.pop(); 
            
        }
        
        StringBuilder sb = new StringBuilder();
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        
        String ans = sb.reverse().toString();
        int i=0;
        while (i < ans.length() && ans.charAt(i) == '0') {
            i++;
        }
        
        if (i == ans.length()) return "0";
        
        return ans.substring(i);//ans.substring(i,ans.length());
    }
}
