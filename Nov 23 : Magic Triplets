Given an array of size n, a triplet (a[i], a[j], a[k]) is called a Magic Triplet if a[i] < a[j] < a[k] and i < j < k.  Count the number of magic triplets in a given array.
 

Example 1:

Input: arr = [3, 2, 1]
Output: 0
Explanation: There is no magic triplet.

Example 2:

Input: arr = [1, 2, 3, 4]
Output: 4
Explanation: Fours magic triplets are 
(1, 2, 3), (1, 2, 4), (1, 3, 4) and 
(2, 3, 4).

Expected Time Complexity: O(N2) 
Expected Space Complexity: O(1)
 

Constraints:
1 <= length of array <= 1000
1 <= arr[i] <= 100000


//brute force : Taking time complexity [O(n^3)] giving tle


public static int countTriplets(int[] nums){
        int ans=0;
        int n=nums.length;
        if(nums.length<4)
            return 0;
        for(int i=0;i<nums.length-2;i++){
            for(int j=i+1;j<nums.length-1;j++){
                for(int k=j+1;k<nums.length;k++){
                    if(nums[i]<nums[j] && nums[j]<nums[k])
                        ans++;
                }
            }
        }

return ans;
}

approach-2(by using one suffing array )[time complexity :- O(n^2) and space :-O(n) ]
class Solution{
    public int countTriplets(int[] nums){
        int ans=0;
        int n=nums.length;
        if(nums.length<3)
            return 0;
          
        
        int suf_greater[]=new int[n];
        Arrays.fill(suf_greater,0);

        for(int i=0;i<n-1;i++){
            int count=0;
            for(int j=i+1;j<n;j++){
                if(nums[j]>nums[i])
                    count++;
            }
            suf_greater[i]=count;
        }
        
        for(int i=0;i<n-2;i++){
            for(int j=i+1;j<n;j++){
                if(nums[j]>nums[i])
                    ans+=suf_greater[j];
            }
        }
        return ans;
    }
}
