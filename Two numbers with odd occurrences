Given an unsorted array, Arr[] of size N and that contains even number of occurrences for all numbers except two numbers. 
Find the two numbers in decreasing order which has odd occurrences.

Example 1:

Input:
N = 8
Arr = {4, 2, 4, 5, 2, 3, 3, 1}
Output: {5, 1} 

approach-1 by sorting the array

take timecomplexity of O(nlogn) and space complexity O(1)

approach-2  by using hashmap or frequency array

store all the occurance of number and raturn yhe number which has 1 occurance .timecomplexity of O(n) and space complexity O(n)

//approach-3 (optimal by using xor operator) timecomplexity of O(n) and space complexity O(1)

//code
class Solution
{
    public int[] twoOddNum(int arr[], int N)
    {
        int xorRes=0;
        for(int x:arr){
            xorRes^=x;
        }
        int setBit=0;
        for(int i=0;i<32;i++){
            int curr=1<<i;
            if((xorRes&curr)!=0){// find the set bit position
                setBit=curr;
                break;
            }
        }
        int first=0;
        int second=0;
        for(int i=0;i<N;i++){
            if((arr[i]&setBit)!=0)//having setbit elements as 1
            first^=arr[i];
            else
            second^=arr[i];//other element having setbit 0
        }
        int ans[]=new int[2];
        if(first<second){
            ans[0]=second;
            ans[1]=first;
        }else{
            ans[1]=second;
            ans[0]=first;
        }
        return ans;
    }
}
